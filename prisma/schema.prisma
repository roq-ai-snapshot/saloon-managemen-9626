generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id                              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guest_id                        String       @db.Uuid
  organization_id                 String       @db.Uuid
  status                          String       @db.VarChar(255)
  appointment_time                DateTime     @db.Timestamp(6)
  service_type                    String       @db.VarChar(255)
  staff_id                        String       @db.Uuid
  created_at                      DateTime     @default(now()) @db.Timestamp(6)
  updated_at                      DateTime     @default(now()) @db.Timestamp(6)
  user_appointment_guest_idTouser user         @relation("appointment_guest_idTouser", fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization                    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_appointment_staff_idTouser user         @relation("appointment_staff_idTouser", fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  appointment appointment[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schedule    schedule[]
  task        task[]
  transaction transaction[]
}

model schedule {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time      DateTime     @db.Timestamp(6)
  end_time        DateTime     @db.Timestamp(6)
  day_of_week     String       @db.VarChar(255)
  staff_id        String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model task {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  status          String       @db.VarChar(255)
  start_time      DateTime     @db.Timestamp(6)
  end_time        DateTime     @db.Timestamp(6)
  staff_id        String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model transaction {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount           Int
  transaction_date DateTime     @db.Timestamp(6)
  transaction_type String       @db.VarChar(255)
  organization_id  String       @db.Uuid
  accountant_id    String       @db.Uuid
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  user             user         @relation(fields: [accountant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization     organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                  String         @unique @db.VarChar(255)
  firstName                              String?        @db.VarChar(255)
  lastName                               String?        @db.VarChar(255)
  roq_user_id                            String         @db.VarChar(255)
  tenant_id                              String         @db.VarChar(255)
  created_at                             DateTime       @default(now()) @db.Timestamp(6)
  updated_at                             DateTime       @default(now()) @db.Timestamp(6)
  appointment_appointment_guest_idTouser appointment[]  @relation("appointment_guest_idTouser")
  appointment_appointment_staff_idTouser appointment[]  @relation("appointment_staff_idTouser")
  organization                           organization[]
  schedule                               schedule[]
  task                                   task[]
  transaction                            transaction[]
}
